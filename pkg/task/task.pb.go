// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: task.proto

package task

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import strings "strings"
import reflect "reflect"

import encoding_binary "encoding/binary"
import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Applicants struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=Status,json=status,proto3" json:"Status,omitempty"`
	Answers              []string `protobuf:"bytes,3,rep,name=Answers,json=answers" json:"Answers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Applicants) Reset()      { *m = Applicants{} }
func (*Applicants) ProtoMessage() {}
func (*Applicants) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_87442cadd784bd5f, []int{0}
}
func (m *Applicants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Applicants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Applicants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Applicants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Applicants.Merge(dst, src)
}
func (m *Applicants) XXX_Size() int {
	return m.Size()
}
func (m *Applicants) XXX_DiscardUnknown() {
	xxx_messageInfo_Applicants.DiscardUnknown(m)
}

var xxx_messageInfo_Applicants proto.InternalMessageInfo

func (m *Applicants) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Applicants) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Applicants) GetAnswers() []string {
	if m != nil {
		return m.Answers
	}
	return nil
}

type Price struct {
	Side                 float64  `protobuf:"fixed64,1,opt,name=Side,json=side,proto3" json:"Side,omitempty"`
	Currency             string   `protobuf:"bytes,2,opt,name=Currency,json=currency,proto3" json:"Currency,omitempty"`
	Sider                float64  `protobuf:"fixed64,3,opt,name=Sider,json=sider,proto3" json:"Sider,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Price) Reset()      { *m = Price{} }
func (*Price) ProtoMessage() {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_87442cadd784bd5f, []int{1}
}
func (m *Price) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Price.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(dst, src)
}
func (m *Price) XXX_Size() int {
	return m.Size()
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetSide() float64 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *Price) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Price) GetSider() float64 {
	if m != nil {
		return m.Sider
	}
	return 0
}

type Info struct {
	TranslatedName       string   `protobuf:"bytes,1,opt,name=TranslatedName,json=translatedName,proto3" json:"TranslatedName,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	TranslatedCategory   string   `protobuf:"bytes,3,opt,name=TranslatedCategory,json=translatedCategory,proto3" json:"TranslatedCategory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Info) Reset()      { *m = Info{} }
func (*Info) ProtoMessage() {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_87442cadd784bd5f, []int{2}
}
func (m *Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(dst, src)
}
func (m *Info) XXX_Size() int {
	return m.Size()
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetTranslatedName() string {
	if m != nil {
		return m.TranslatedName
	}
	return ""
}

func (m *Info) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Info) GetTranslatedCategory() string {
	if m != nil {
		return m.TranslatedCategory
	}
	return ""
}

type Type struct {
	Category             string   `protobuf:"bytes,1,opt,name=Category,json=category,proto3" json:"Category,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	Fr                   *Info    `protobuf:"bytes,3,opt,name=Fr,json=fr" json:"Fr,omitempty"`
	En                   *Info    `protobuf:"bytes,4,opt,name=En,json=en" json:"En,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Type) Reset()      { *m = Type{} }
func (*Type) ProtoMessage() {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_87442cadd784bd5f, []int{3}
}
func (m *Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(dst, src)
}
func (m *Type) XXX_Size() int {
	return m.Size()
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

func (m *Type) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Type) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Type) GetFr() *Info {
	if m != nil {
		return m.Fr
	}
	return nil
}

func (m *Type) GetEn() *Info {
	if m != nil {
		return m.En
	}
	return nil
}

type T struct {
	ID                   string       `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Name                 string       `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Type                 Type         `protobuf:"bytes,3,opt,name=Type,json=type" json:"Type"`
	Country              string       `protobuf:"bytes,4,opt,name=Country,json=country,proto3" json:"Country,omitempty"`
	Pricing              Price        `protobuf:"bytes,5,opt,name=Pricing,json=pricing" json:"Pricing"`
	CreatedAt            time.Time    `protobuf:"bytes,6,opt,name=CreatedAt,json=createdAt,stdtime" json:"CreatedAt"`
	UpdatedAt            time.Time    `protobuf:"bytes,7,opt,name=UpdatedAt,json=updatedAt,stdtime" json:"UpdatedAt"`
	Description          string       `protobuf:"bytes,8,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Applicants           []Applicants `protobuf:"bytes,9,rep,name=Applicants,json=applicants" json:"Applicants"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *T) Reset()      { *m = T{} }
func (*T) ProtoMessage() {}
func (*T) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_87442cadd784bd5f, []int{4}
}
func (m *T) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *T) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_T.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *T) XXX_Merge(src proto.Message) {
	xxx_messageInfo_T.Merge(dst, src)
}
func (m *T) XXX_Size() int {
	return m.Size()
}
func (m *T) XXX_DiscardUnknown() {
	xxx_messageInfo_T.DiscardUnknown(m)
}

var xxx_messageInfo_T proto.InternalMessageInfo

func (m *T) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *T) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *T) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type{}
}

func (m *T) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *T) GetPricing() Price {
	if m != nil {
		return m.Pricing
	}
	return Price{}
}

func (m *T) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *T) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *T) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *T) GetApplicants() []Applicants {
	if m != nil {
		return m.Applicants
	}
	return nil
}

func init() {
	proto.RegisterType((*Applicants)(nil), "task.Applicants")
	proto.RegisterType((*Price)(nil), "task.Price")
	proto.RegisterType((*Info)(nil), "task.Info")
	proto.RegisterType((*Type)(nil), "task.Type")
	proto.RegisterType((*T)(nil), "task.T")
}
func (this *Applicants) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Applicants)
	if !ok {
		that2, ok := that.(Applicants)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Answers) != len(that1.Answers) {
		return false
	}
	for i := range this.Answers {
		if this.Answers[i] != that1.Answers[i] {
			return false
		}
	}
	return true
}
func (this *Price) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Price)
	if !ok {
		that2, ok := that.(Price)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Side != that1.Side {
		return false
	}
	if this.Currency != that1.Currency {
		return false
	}
	if this.Sider != that1.Sider {
		return false
	}
	return true
}
func (this *Info) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Info)
	if !ok {
		that2, ok := that.(Info)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TranslatedName != that1.TranslatedName {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.TranslatedCategory != that1.TranslatedCategory {
		return false
	}
	return true
}
func (this *Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Type)
	if !ok {
		that2, ok := that.(Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Category != that1.Category {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Fr.Equal(that1.Fr) {
		return false
	}
	if !this.En.Equal(that1.En) {
		return false
	}
	return true
}
func (this *T) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*T)
	if !ok {
		that2, ok := that.(T)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Type.Equal(&that1.Type) {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if !this.Pricing.Equal(&that1.Pricing) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Applicants) != len(that1.Applicants) {
		return false
	}
	for i := range this.Applicants {
		if !this.Applicants[i].Equal(&that1.Applicants[i]) {
			return false
		}
	}
	return true
}
func (this *Applicants) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&task.Applicants{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Answers: "+fmt.Sprintf("%#v", this.Answers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Price) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&task.Price{")
	s = append(s, "Side: "+fmt.Sprintf("%#v", this.Side)+",\n")
	s = append(s, "Currency: "+fmt.Sprintf("%#v", this.Currency)+",\n")
	s = append(s, "Sider: "+fmt.Sprintf("%#v", this.Sider)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Info) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&task.Info{")
	s = append(s, "TranslatedName: "+fmt.Sprintf("%#v", this.TranslatedName)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "TranslatedCategory: "+fmt.Sprintf("%#v", this.TranslatedCategory)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&task.Type{")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Fr != nil {
		s = append(s, "Fr: "+fmt.Sprintf("%#v", this.Fr)+",\n")
	}
	if this.En != nil {
		s = append(s, "En: "+fmt.Sprintf("%#v", this.En)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *T) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&task.T{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+strings.Replace(this.Type.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Pricing: "+strings.Replace(this.Pricing.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.Applicants != nil {
		vs := make([]*Applicants, len(this.Applicants))
		for i := range vs {
			vs[i] = &this.Applicants[i]
		}
		s = append(s, "Applicants: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTask(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Applicants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applicants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Answers) > 0 {
		for _, s := range m.Answers {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Price) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Price) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Side != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Side))))
		i += 8
	}
	if len(m.Currency) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Currency)))
		i += copy(dAtA[i:], m.Currency)
	}
	if m.Sider != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sider))))
		i += 8
	}
	return i, nil
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TranslatedName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.TranslatedName)))
		i += copy(dAtA[i:], m.TranslatedName)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.TranslatedCategory) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.TranslatedCategory)))
		i += copy(dAtA[i:], m.TranslatedCategory)
	}
	return i, nil
}

func (m *Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Type) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Category) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Fr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Fr.Size()))
		n1, err := m.Fr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.En != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.En.Size()))
		n2, err := m.En.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *T) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *T) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTask(dAtA, i, uint64(m.Type.Size()))
	n3, err := m.Type.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.Country) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTask(dAtA, i, uint64(m.Pricing.Size()))
	n4, err := m.Pricing.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x32
	i++
	i = encodeVarintTask(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x3a
	i++
	i = encodeVarintTask(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Description) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Applicants) > 0 {
		for _, msg := range m.Applicants {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintTask(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedApplicants(r randyTask, easy bool) *Applicants {
	this := &Applicants{}
	this.ID = string(randStringTask(r))
	this.Status = string(randStringTask(r))
	v1 := r.Intn(10)
	this.Answers = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Answers[i] = string(randStringTask(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPrice(r randyTask, easy bool) *Price {
	this := &Price{}
	this.Side = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Side *= -1
	}
	this.Currency = string(randStringTask(r))
	this.Sider = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Sider *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInfo(r randyTask, easy bool) *Info {
	this := &Info{}
	this.TranslatedName = string(randStringTask(r))
	this.Description = string(randStringTask(r))
	this.TranslatedCategory = string(randStringTask(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedType(r randyTask, easy bool) *Type {
	this := &Type{}
	this.Category = string(randStringTask(r))
	this.Key = string(randStringTask(r))
	if r.Intn(10) != 0 {
		this.Fr = NewPopulatedInfo(r, easy)
	}
	if r.Intn(10) != 0 {
		this.En = NewPopulatedInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedT(r randyTask, easy bool) *T {
	this := &T{}
	this.ID = string(randStringTask(r))
	this.Name = string(randStringTask(r))
	v2 := NewPopulatedType(r, easy)
	this.Type = *v2
	this.Country = string(randStringTask(r))
	v3 := NewPopulatedPrice(r, easy)
	this.Pricing = *v3
	v4 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v4
	v5 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v5
	this.Description = string(randStringTask(r))
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Applicants = make([]Applicants, v6)
		for i := 0; i < v6; i++ {
			v7 := NewPopulatedApplicants(r, easy)
			this.Applicants[i] = *v7
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTask interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTask(r randyTask) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTask(r randyTask) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneTask(r)
	}
	return string(tmps)
}
func randUnrecognizedTask(r randyTask, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTask(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTask(dAtA []byte, r randyTask, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTask(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateTask(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateTask(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTask(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTask(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTask(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTask(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Applicants) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.Answers) > 0 {
		for _, s := range m.Answers {
			l = len(s)
			n += 1 + l + sovTask(uint64(l))
		}
	}
	return n
}

func (m *Price) Size() (n int) {
	var l int
	_ = l
	if m.Side != 0 {
		n += 9
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Sider != 0 {
		n += 9
	}
	return n
}

func (m *Info) Size() (n int) {
	var l int
	_ = l
	l = len(m.TranslatedName)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.TranslatedCategory)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *Type) Size() (n int) {
	var l int
	_ = l
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Fr != nil {
		l = m.Fr.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.En != nil {
		l = m.En.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *T) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = m.Type.Size()
	n += 1 + l + sovTask(uint64(l))
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = m.Pricing.Size()
	n += 1 + l + sovTask(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTask(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovTask(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.Applicants) > 0 {
		for _, e := range m.Applicants {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	return n
}

func sovTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Applicants) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Applicants{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Answers:` + fmt.Sprintf("%v", this.Answers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Price) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Price{`,
		`Side:` + fmt.Sprintf("%v", this.Side) + `,`,
		`Currency:` + fmt.Sprintf("%v", this.Currency) + `,`,
		`Sider:` + fmt.Sprintf("%v", this.Sider) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Info) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Info{`,
		`TranslatedName:` + fmt.Sprintf("%v", this.TranslatedName) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`TranslatedCategory:` + fmt.Sprintf("%v", this.TranslatedCategory) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Type) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Type{`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Fr:` + strings.Replace(fmt.Sprintf("%v", this.Fr), "Info", "Info", 1) + `,`,
		`En:` + strings.Replace(fmt.Sprintf("%v", this.En), "Info", "Info", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *T) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&T{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + strings.Replace(strings.Replace(this.Type.String(), "Type", "Type", 1), `&`, ``, 1) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Pricing:` + strings.Replace(strings.Replace(this.Pricing.String(), "Price", "Price", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Applicants:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Applicants), "Applicants", "Applicants", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTask(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Applicants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applicants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applicants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = append(m.Answers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Price) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Price: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Price: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Side = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sider", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sider = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranslatedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranslatedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranslatedCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranslatedCategory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fr == nil {
				m.Fr = &Info{}
			}
			if err := m.Fr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field En", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.En == nil {
				m.En = &Info{}
			}
			if err := m.En.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *T) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: T: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: T: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pricing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applicants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applicants = append(m.Applicants, Applicants{})
			if err := m.Applicants[len(m.Applicants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("task.proto", fileDescriptor_task_87442cadd784bd5f) }

var fileDescriptor_task_87442cadd784bd5f = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0xee, 0x24, 0x69, 0xd3, 0xbc, 0x85, 0x65, 0x19, 0x44, 0x42, 0x0f, 0xd3, 0x52, 0x44, 0x0a,
	0x62, 0x16, 0x56, 0x10, 0xaf, 0xfd, 0x50, 0x58, 0xc4, 0x45, 0xb2, 0xf5, 0x07, 0xa4, 0xe9, 0x34,
	0x86, 0x6d, 0x67, 0xc2, 0x64, 0x82, 0xf4, 0xb6, 0x3f, 0x61, 0x7f, 0x86, 0x3f, 0xc1, 0xa3, 0xc7,
	0x3d, 0xee, 0xd1, 0x93, 0xda, 0x78, 0xf1, 0xb8, 0x27, 0xf1, 0x28, 0x33, 0x93, 0x10, 0xd7, 0x9e,
	0xbc, 0xcd, 0xf3, 0x7e, 0x3c, 0xef, 0xfb, 0xcc, 0xf3, 0x02, 0xc8, 0x28, 0xbf, 0x0c, 0x32, 0xc1,
	0x25, 0xc7, 0x8e, 0x7a, 0xf7, 0x9f, 0x26, 0xa9, 0x7c, 0x5f, 0x2c, 0x83, 0x98, 0x6f, 0x4f, 0x12,
	0x9e, 0xf0, 0x13, 0x9d, 0x5c, 0x16, 0x6b, 0x8d, 0x34, 0xd0, 0x2f, 0xd3, 0xd4, 0x1f, 0x24, 0x9c,
	0x27, 0x1b, 0xda, 0x54, 0xc9, 0x74, 0x4b, 0x73, 0x19, 0x6d, 0x33, 0x53, 0x30, 0x3a, 0x07, 0x98,
	0x64, 0xd9, 0x26, 0x8d, 0x23, 0x26, 0x73, 0x7c, 0x04, 0xd6, 0xd9, 0xdc, 0x47, 0x43, 0x34, 0xf6,
	0x42, 0x2b, 0x9d, 0xe3, 0x87, 0xd0, 0xb9, 0x90, 0x91, 0x2c, 0x72, 0xdf, 0xd2, 0xb1, 0x4e, 0xae,
	0x11, 0xf6, 0xc1, 0x9d, 0xb0, 0xfc, 0x03, 0x15, 0xb9, 0x6f, 0x0f, 0xed, 0xb1, 0x17, 0xba, 0x91,
	0x81, 0xa3, 0x37, 0xd0, 0x7e, 0x2b, 0xd2, 0x98, 0x62, 0x0c, 0xce, 0x45, 0xba, 0xa2, 0x9a, 0x0c,
	0x85, 0x4e, 0x9e, 0xae, 0x28, 0xee, 0x43, 0x77, 0x56, 0x08, 0x41, 0x59, 0xbc, 0xab, 0x08, 0xbb,
	0x71, 0x85, 0xf1, 0x03, 0x68, 0xab, 0x7a, 0xe1, 0xdb, 0xba, 0xa1, 0xad, 0x1a, 0xc4, 0xe8, 0x0a,
	0x81, 0x73, 0xc6, 0xd6, 0x1c, 0x3f, 0x86, 0xa3, 0x85, 0x88, 0x58, 0xbe, 0x89, 0x24, 0x5d, 0x9d,
	0x47, 0x5b, 0x5a, 0x6d, 0x79, 0x24, 0xef, 0x45, 0xf1, 0x10, 0x7a, 0x73, 0x9a, 0xc7, 0x22, 0xcd,
	0x64, 0xca, 0x59, 0x35, 0xa5, 0xb7, 0x6a, 0x42, 0x38, 0x00, 0xdc, 0x30, 0xcd, 0x22, 0x49, 0x13,
	0x2e, 0x76, 0x7a, 0xaa, 0x17, 0x62, 0x79, 0x90, 0x19, 0x6d, 0xc0, 0x59, 0xec, 0x32, 0xb3, 0x7c,
	0x5d, 0x8d, 0xaa, 0xe5, 0x2b, 0x8c, 0x8f, 0xc1, 0x7e, 0x4d, 0x6b, 0x4d, 0xf6, 0x25, 0xdd, 0xe1,
	0x3e, 0x58, 0xaf, 0x8c, 0x96, 0xde, 0x29, 0x04, 0xda, 0x46, 0xa5, 0x23, 0xb4, 0xd6, 0x42, 0xe5,
	0x5e, 0x32, 0xdf, 0x39, 0xcc, 0x51, 0x36, 0xfa, 0x65, 0x01, 0x5a, 0x1c, 0xf8, 0x80, 0xc1, 0xd1,
	0x9a, 0xcd, 0x00, 0x87, 0x29, 0xa5, 0x8f, 0xcc, 0x5e, 0xf7, 0x67, 0xa8, 0xc8, 0xd4, 0xb9, 0xf9,
	0x3a, 0x68, 0x85, 0x8e, 0x54, 0x5b, 0xfb, 0xe0, 0xce, 0x78, 0xc1, 0xa4, 0xd8, 0xe9, 0x81, 0x5e,
	0xe8, 0xc6, 0x06, 0xe2, 0x27, 0xe0, 0x2a, 0xa7, 0x52, 0x96, 0xf8, 0x6d, 0x4d, 0xd1, 0x33, 0x14,
	0xda, 0xbe, 0x8a, 0xc3, 0xcd, 0x4c, 0x05, 0x9e, 0x82, 0x37, 0x13, 0x54, 0xfd, 0xcb, 0x44, 0xfa,
	0x1d, 0x5d, 0xde, 0x0f, 0xcc, 0x6d, 0x05, 0xf5, 0x6d, 0x05, 0x8b, 0xfa, 0xb6, 0xa6, 0x5d, 0xd5,
	0x7d, 0xfd, 0x6d, 0x80, 0x42, 0x2f, 0xae, 0xdb, 0x14, 0xc7, 0xbb, 0x6c, 0x55, 0x71, 0xb8, 0xff,
	0xc3, 0x51, 0xd4, 0x6d, 0xff, 0xda, 0xdb, 0x3d, 0xb4, 0xf7, 0xf9, 0xdf, 0x07, 0xed, 0x7b, 0x43,
	0x7b, 0xdc, 0x3b, 0x3d, 0x36, 0xca, 0x9a, 0x78, 0x25, 0x0f, 0xa2, 0x26, 0xf2, 0xe2, 0x76, 0x4f,
	0x5a, 0x5f, 0xf6, 0xa4, 0x75, 0xb7, 0x27, 0xe8, 0xf7, 0x9e, 0xa0, 0xab, 0x92, 0xa0, 0x8f, 0x25,
	0x41, 0x9f, 0x4a, 0x82, 0x3e, 0x97, 0x04, 0xdd, 0x94, 0x04, 0xdd, 0x96, 0x04, 0x7d, 0x2f, 0x09,
	0xfa, 0x59, 0x92, 0xd6, 0x5d, 0x49, 0xd0, 0xf5, 0x0f, 0xd2, 0x5a, 0x76, 0xf4, 0xf2, 0xcf, 0xfe,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xdd, 0xea, 0xb9, 0xad, 0x03, 0x00, 0x00,
}
